{
  "{\"assumptions\":{},\"sourceRoot\":\"/home/runner/work/javascript/javascript/scripts/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/runner/work/javascript/javascript\",\"filename\":\"/home/runner/work/javascript/javascript/scripts/helpers.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/runner/work/javascript/javascript\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-bigint\",\"visitor\":{},\"options\":{}},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":true}},{\"key\":\"inject-polyfills\",\"visitor\":{\"ImportDeclaration\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"method\":\"entry-global\",\"version\":\"3.10.0\",\"targets\":{\"node\":\"14.16.1\"},\"include\":{},\"exclude\":{},\"proposals\":false,\"shippedProposals\":false,\"debug\":false}},{\"key\":\"preset-env/replace-babel-polyfill\",\"visitor\":{\"ImportDeclaration\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"deprecated\":true}},{\"key\":\"preset-env/remove-regenerator\",\"visitor\":{\"ImportDeclaration\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"method\":\"entry-global\",\"version\":\"3.10.0\",\"targets\":{\"node\":\"14.16.1\"},\"include\":{},\"exclude\":{},\"proposals\":false,\"shippedProposals\":false,\"debug\":false}}],\"presets\":[]}:7.14.0": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/home/runner/work/javascript/javascript/scripts/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/runner/work/javascript/javascript",
      "filename": "/home/runner/work/javascript/javascript/scripts/helpers.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/home/runner/work/javascript/javascript",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-bigint",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": true
          }
        },
        {
          "key": "inject-polyfills",
          "visitor": {
            "ImportDeclaration": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "method": "entry-global",
            "version": "3.10.0",
            "targets": {
              "node": "14.16.1"
            },
            "include": {},
            "exclude": {},
            "proposals": false,
            "shippedProposals": false,
            "debug": false
          }
        },
        {
          "key": "preset-env/replace-babel-polyfill",
          "visitor": {
            "ImportDeclaration": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "deprecated": true
          }
        },
        {
          "key": "preset-env/remove-regenerator",
          "visitor": {
            "ImportDeclaration": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "method": "entry-global",
            "version": "3.10.0",
            "targets": {
              "node": "14.16.1"
            },
            "include": {},
            "exclude": {},
            "proposals": false,
            "shippedProposals": false,
            "debug": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/runner/work/javascript/javascript/scripts/helpers.js",
        "plugins": [
          "bigInt",
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/home/runner/work/javascript/javascript/scripts/helpers.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/runner/work/javascript/javascript/scripts/",
        "sourceFileName": "helpers.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertAssignment = assertAssignment;\nexports.sha = sha;\nexports.findExerciseDirectory = findExerciseDirectory;\nexports.fileConfiguration = fileConfiguration;\nexports.hasStub = hasStub;\nexports.envIsThruthy = envIsThruthy;\nexports.shouldPrepare = shouldPrepare;\nexports.shouldCleanup = shouldCleanup;\nexports.prepareAndRun = prepareAndRun;\nexports.cleanUp = cleanUp;\nexports.createExercisePackageJson = createExercisePackageJson;\nexports.mergePackageJsons = mergePackageJsons;\nexports.prepareExercisePackageJson = prepareExercisePackageJson;\nexports.shaPackageJson = shaPackageJson;\nexports.prepare = prepare;\nexports.registerExitHandler = registerExitHandler;\nexports.assignments = exports.packageFiles = void 0;\n\n/**\n * This file provides helper functions & is NOT intended to be run as a script.\n */\nconst shell = require('shelljs');\n\nconst path = require('path');\n\nconst crypto = require('crypto');\n\nconst exerciseDirs = shell.ls('-d', path.join('exercises', '{practice,concept}', '*'));\nconst packageFiles = exerciseDirs.map(dir => `${dir}/package.json`);\nexports.packageFiles = packageFiles;\nconst assignments = shell.env['ASSIGNMENT'] ? [shell.env['ASSIGNMENT']] : knownAssignments();\nexports.assignments = assignments;\n\nfunction knownAssignments() {\n  return exerciseDirs.map(directory => path.join(path.basename(path.dirname(directory)), path.basename(directory)));\n}\n\nfunction assertAssignment(assignment, shouldExist = true) {\n  assignment = assignment.replace(/[/\\\\]/g, path.sep);\n\n  if (assignment.split(path.sep).length === 2) {\n    if (!shouldExist) {\n      return true;\n    }\n\n    if (shell.test(`-d`, path.join('exercises', assignment))) {\n      return true;\n    }\n  }\n\n  shell.echo(\"[Failure] that's not a valid assignment reference\");\n\n  const chalk = require('chalk');\n\n  if (assignment.split(path.sep).length === 1) {\n    // prettier-ignore\n    shell.echo(`\nExpected ${chalk.cyan(`{type}${path.sep}{slug}`)}, actual: ${chalk.yellow(assignment)}.\n- Use ${chalk.green(`concept${path.sep}${assignment}`)} if ${chalk.yellow(assignment)} is a concept exercise.\n- Use ${chalk.green(`practice${path.sep}${assignment}`)} if ${chalk.yellow(assignment)} is a practice exercise.\n    `.trim());\n  }\n\n  const suggestions = knownAssignments().filter(known => known.includes(assignment));\n\n  if (suggestions.length > 0 && suggestions.length < 5) {\n    shell.echo('\\nDid you mean:\\n' + suggestions.map(suggestion => `- ${suggestion}`).join('\\n'));\n  }\n\n  return false;\n}\n\nfunction sha(str) {\n  return crypto.createHash('md5').update(str).digest('hex');\n}\n\nfunction findExerciseDirectory(input) {\n  const directory = exerciseDirs.find(exerciseDir => {\n    return input.indexOf(exerciseDir) !== -1;\n  });\n\n  if (!directory) {\n    return null;\n  }\n\n  return path.join(path.basename(path.dirname(directory)), path.basename(directory));\n}\n\nfunction fileConfiguration(assignment) {\n  const pathToConfig = path.join('exercises', assignment, '.meta', 'config.json');\n  let files = undefined;\n\n  if (shell.test('-f', pathToConfig)) {\n    const configuration = JSON.parse(shell.cat(pathToConfig).toString());\n\n    if (configuration.files && configuration.files.test.length > 0) {\n      files = configuration.files;\n    }\n  }\n\n  files = files || JSON.parse(shell.cat('config.json').toString()).files;\n  Object.keys(files).forEach(key => {\n    files[key] = files[key].map(value => value.replace('%{kebab_slug}', path.basename(assignment)).replace(/[/\\\\]/g, path.sep));\n  });\n  return files;\n}\n\nfunction hasStub(assignment) {\n  const stubFiles = fileConfiguration(assignment).solution;\n  return stubFiles.every(stubFile => shell.test('-f', path.join('exercises', assignment, stubFile)));\n}\n\nfunction envIsThruthy(key, unset = false) {\n  if (shell.env[key] === undefined) {\n    return unset;\n  }\n\n  return !['0', 0, 'false', false, null, 'null'].includes(shell.env[key]);\n}\n\nfunction shouldPrepare() {\n  return envIsThruthy('PREPARE');\n}\n\nfunction shouldCleanup() {\n  return envIsThruthy('CLEANUP');\n}\n\nfunction prepareAndRun(command, infoStr, failureStr) {\n  if (shouldPrepare()) {\n    const assignment = shell.env['ASSIGNMENT'];\n\n    if (assignment) {\n      prepare(assignment);\n    } else {\n      assignments.forEach(prepare);\n    }\n  }\n\n  if (infoStr) {\n    shell.echo(infoStr);\n  }\n\n  const result = shell.exec(command);\n\n  if (shouldCleanup()) {\n    cleanUp();\n  }\n\n  if (result.code !== 0) {\n    if (failureStr) {\n      shell.echo(failureStr);\n    }\n\n    shell.exit(1);\n  }\n}\n\nfunction cleanUp() {\n  shell.rm('-rf', 'tmp_exercises');\n  shell.rm('-f', 'exercise-package.json');\n  shell.rm('-f', 'exercise-package.json.sha');\n} // These packages will be skipped while performing checksum. In other words,\n// these packages are only interesting for maintaining this repository and not\n// for the student.\n\n\nconst SKIP_PACKAGES_FOR_CHECKSUM = ['shelljs', '@babel/node', 'prettier', 'diff', 'chalk']; // These fields may differ between package.json files.\n\nconst SKIP_FIELDS_FOR_CHECKSUM = ['name', 'description', 'author', 'contributors'];\n\nfunction createExercisePackageJson(writeSha = false) {\n  const packageFile = shell.cat('package.json').toString();\n  const packageJson = JSON.parse(packageFile); // Filter out some unwanted packages and create package.json for exercises\n\n  SKIP_PACKAGES_FOR_CHECKSUM.forEach(pkg => delete packageJson['devDependencies'][pkg]);\n  const shellStr = new shell.ShellString(JSON.stringify(packageJson, undefined, 2) + '\\n');\n  shellStr.to('exercise-package.json'); // Now remove all fields that should not be considered for checksum\n\n  SKIP_FIELDS_FOR_CHECKSUM.forEach(field => {\n    delete packageJson[field];\n  });\n  delete packageJson['repository']['directory'];\n\n  if (writeSha) {\n    const checksumShellStr = new shell.ShellString(shaPackageJson(packageJson));\n    checksumShellStr.to('exercise-package.json.sha');\n  }\n}\n\nfunction mergePackageJsons(basePackageJson, packageJson) {\n  const mergedPackageJson = JSON.parse(JSON.stringify(basePackageJson));\n  SKIP_FIELDS_FOR_CHECKSUM.forEach(key => {\n    mergedPackageJson[key] = packageJson[key];\n  });\n  const extraRepositoryKeys = Object.keys(packageJson.repository || {}).filter(key => !basePackageJson.repository[key]);\n  extraRepositoryKeys.forEach(key => {\n    mergedPackageJson.repository[key] = packageJson.repository[key];\n  });\n  return mergedPackageJson;\n}\n\nfunction prepareExercisePackageJson(destinationPath, writeSha = false) {\n  const packageFile = shell.cat(destinationPath).toString();\n  const packageJson = JSON.parse(packageFile); // Now remove all fields that should not be considered for checksum\n\n  SKIP_FIELDS_FOR_CHECKSUM.forEach(field => {\n    delete packageJson[field];\n  });\n  delete packageJson['repository']['directory'];\n\n  if (writeSha) {\n    const checksumShellStr = new shell.ShellString(shaPackageJson(packageJson));\n    checksumShellStr.to(`${destinationPath}.sha`);\n  }\n\n  return packageJson;\n}\n\nfunction shaPackageJson(packageJson) {\n  return sha(JSON.stringify(packageJson, undefined, 2).trim() + '\\n');\n}\n/**\n * Copy sample solution and specs for given assignment to tmp_exercises\n */\n\n\nfunction prepare(assignment) {\n  if (!assignment) {\n    shell.echo('[Failure] Assignment not provided');\n    shell.exit(1);\n  }\n\n  if (!assertAssignment(assignment, true)) {\n    shell.exit(1);\n  }\n\n  const files = fileConfiguration(assignment);\n  const [type] = assignment.split(/[/\\\\]/g);\n  const exampleFiles = type === 'concept' ? files.exemplar : files.example;\n  files.test.forEach(specFileName => {\n    const specFile = path.join('exercises', assignment, specFileName); // Skip file if it doesn't exist\n\n    if (!shell.test('-f', specFile)) {\n      if (specFileName !== 'custom.spec.js') {\n        console.warn(`Skipped copying test file for ${assignment}: ${specFileName} because it doesn't exist`);\n      }\n\n      return;\n    }\n\n    const specFileDestination = path.join('tmp_exercises', assignment, specFileName);\n    shell.mkdir('-p', path.dirname(specFileDestination));\n    shell.cp(specFile, specFileDestination); // Enable tests\n    //\n    // This purposefully does not replace describe.skip or test.skip, so we can\n    // have test cases that are _always_ skipped, including CI. Use case?\n    // - platform dependent tests\n    // - test cases that don't yet work with our solution\n    //\n\n    shell.sed(/x(test|it)\\(/, 'test(', specFileDestination).to(specFileDestination);\n    shell.sed('xdescribe', 'describe', specFileDestination).to(specFileDestination);\n  });\n  shell.mkdir('-p', path.join('tmp_exercises', assignment, 'lib'));\n  exampleFiles.forEach((exampleFileName, i) => {\n    const exampleFile = path.join('exercises', assignment, exampleFileName);\n    const exampleFileDestination = path.join('tmp_exercises', assignment, files.solution[i]);\n    shell.sed(\"from '../\", \"from './\", exampleFile).to(exampleFileDestination);\n  }); // If there are more solution files than example or exemplar files, copy over\n  // the remaining ones. This allows us to overwrite solution files by providing\n  // them in exemplar, but keep them\n\n  if (files.solution.length > exampleFiles.length) {\n    files.solution.slice(exampleFiles.length).forEach(extraLibFileName => {\n      const solutionFile = path.join('exercises', assignment, extraLibFileName);\n      const solutionFileDestination = path.join('tmp_exercises', assignment, extraLibFileName);\n      shell.cp(solutionFile, solutionFileDestination);\n    });\n  } // Copy new-style editor files\n\n\n  if ('editor' in files) {\n    files.editor.forEach(readonlyFileName => {\n      const readonlyFile = path.join('exercises', assignment, readonlyFileName);\n      const readonlyFileDestination = path.join('tmp_exercises', assignment, readonlyFileName);\n      shell.cp(readonlyFile, readonlyFileDestination);\n    });\n  } // Copy legacy lib files\n\n\n  const libDir = path.join('exercises', assignment, 'lib');\n\n  if (shell.test('-d', libDir)) {\n    shell.cp(path.join(libDir, '*.js'), path.join('tmp_exercises', assignment, 'lib'));\n  } // Copy legacy data files\n\n\n  shell.mkdir('-p', path.join('tmp_exercises', assignment, 'data'));\n  const dataDir = path.join('exercises', assignment, 'data');\n\n  if (shell.test('-d', dataDir)) {\n    shell.cp(path.join(dataDir, '*'), path.join('tmp_exercises', assignment, 'data'));\n  }\n}\n\nfunction registerExitHandler() {\n  function exitHandler(options, exitCode) {\n    cleanUp();\n\n    if (options.error) {\n      console.error(options.error);\n    }\n\n    if (options.cleanup) {\n      /* clean exit */\n    }\n\n    if (exitCode || exitCode === 0) {\n      /* exit code given */\n    }\n\n    if (options.exit) {\n      /* should exit forcefully */\n      process.exit();\n    }\n  } //do something when app is closing\n\n\n  process.on('exit', exitHandler.bind(null, {\n    cleanup: true\n  })); //catches ctrl+c event\n\n  process.on('SIGINT', exitHandler.bind(null, {\n    exit: true\n  })); // catches \"kill pid\" (for example: nodemon restart)\n\n  process.on('SIGUSR1', exitHandler.bind(null, {\n    exit: true\n  }));\n  process.on('SIGUSR2', exitHandler.bind(null, {\n    exit: true\n  })); //catches uncaught exceptions\n\n  process.on('uncaughtException', error => exitHandler({\n    exit: true,\n    error\n  }));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "helpers.js"
      ],
      "names": [
        "shell",
        "require",
        "path",
        "crypto",
        "exerciseDirs",
        "ls",
        "join",
        "packageFiles",
        "map",
        "dir",
        "assignments",
        "env",
        "knownAssignments",
        "directory",
        "basename",
        "dirname",
        "assertAssignment",
        "assignment",
        "shouldExist",
        "replace",
        "sep",
        "split",
        "length",
        "test",
        "echo",
        "chalk",
        "cyan",
        "yellow",
        "green",
        "trim",
        "suggestions",
        "filter",
        "known",
        "includes",
        "suggestion",
        "sha",
        "str",
        "createHash",
        "update",
        "digest",
        "findExerciseDirectory",
        "input",
        "find",
        "exerciseDir",
        "indexOf",
        "fileConfiguration",
        "pathToConfig",
        "files",
        "undefined",
        "configuration",
        "JSON",
        "parse",
        "cat",
        "toString",
        "Object",
        "keys",
        "forEach",
        "key",
        "value",
        "hasStub",
        "stubFiles",
        "solution",
        "every",
        "stubFile",
        "envIsThruthy",
        "unset",
        "shouldPrepare",
        "shouldCleanup",
        "prepareAndRun",
        "command",
        "infoStr",
        "failureStr",
        "prepare",
        "result",
        "exec",
        "cleanUp",
        "code",
        "exit",
        "rm",
        "SKIP_PACKAGES_FOR_CHECKSUM",
        "SKIP_FIELDS_FOR_CHECKSUM",
        "createExercisePackageJson",
        "writeSha",
        "packageFile",
        "packageJson",
        "pkg",
        "shellStr",
        "ShellString",
        "stringify",
        "to",
        "field",
        "checksumShellStr",
        "shaPackageJson",
        "mergePackageJsons",
        "basePackageJson",
        "mergedPackageJson",
        "extraRepositoryKeys",
        "repository",
        "prepareExercisePackageJson",
        "destinationPath",
        "type",
        "exampleFiles",
        "exemplar",
        "example",
        "specFileName",
        "specFile",
        "console",
        "warn",
        "specFileDestination",
        "mkdir",
        "cp",
        "sed",
        "exampleFileName",
        "i",
        "exampleFile",
        "exampleFileDestination",
        "slice",
        "extraLibFileName",
        "solutionFile",
        "solutionFileDestination",
        "editor",
        "readonlyFileName",
        "readonlyFile",
        "readonlyFileDestination",
        "libDir",
        "dataDir",
        "registerExitHandler",
        "exitHandler",
        "options",
        "exitCode",
        "error",
        "cleanup",
        "process",
        "on",
        "bind"
      ],
      "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMG,YAAY,GAAGJ,KAAK,CAACK,EAAN,CACnB,IADmB,EAEnBH,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuB,oBAAvB,EAA6C,GAA7C,CAFmB,CAArB;AAKO,MAAMC,YAAY,GAAGH,YAAY,CAACI,GAAb,CAAkBC,GAAD,IAAU,GAAEA,GAAI,eAAjC,CAArB;;AAEA,MAAMC,WAAW,GAAGV,KAAK,CAACW,GAAN,CAAU,YAAV,IACvB,CAACX,KAAK,CAACW,GAAN,CAAU,YAAV,CAAD,CADuB,GAEvBC,gBAAgB,EAFb;;;AAIP,SAASA,gBAAT,GAA4B;AAC1B,SAAOR,YAAY,CAACI,GAAb,CAAkBK,SAAD,IACtBX,IAAI,CAACI,IAAL,CAAUJ,IAAI,CAACY,QAAL,CAAcZ,IAAI,CAACa,OAAL,CAAaF,SAAb,CAAd,CAAV,EAAkDX,IAAI,CAACY,QAAL,CAAcD,SAAd,CAAlD,CADK,CAAP;AAGD;;AAEM,SAASG,gBAAT,CAA0BC,UAA1B,EAAsCC,WAAW,GAAG,IAApD,EAA0D;AAC/DD,EAAAA,UAAU,GAAGA,UAAU,CAACE,OAAX,CAAmB,QAAnB,EAA6BjB,IAAI,CAACkB,GAAlC,CAAb;;AAEA,MAAIH,UAAU,CAACI,KAAX,CAAiBnB,IAAI,CAACkB,GAAtB,EAA2BE,MAA3B,KAAsC,CAA1C,EAA6C;AAC3C,QAAI,CAACJ,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,QAAIlB,KAAK,CAACuB,IAAN,CAAY,IAAZ,EAAiBrB,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,CAAjB,CAAJ,EAA0D;AACxD,aAAO,IAAP;AACD;AACF;;AAEDjB,EAAAA,KAAK,CAACwB,IAAN,CAAW,mDAAX;;AACA,QAAMC,KAAK,GAAGxB,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAIgB,UAAU,CAACI,KAAX,CAAiBnB,IAAI,CAACkB,GAAtB,EAA2BE,MAA3B,KAAsC,CAA1C,EAA6C;AAC3C;AACAtB,IAAAA,KAAK,CAACwB,IAAN,CAAY;AAChB,WAAWC,KAAK,CAACC,IAAN,CAAY,SAAQxB,IAAI,CAACkB,GAAI,QAA7B,CAAsC,aAAYK,KAAK,CAACE,MAAN,CAAaV,UAAb,CAAyB;AACtF,QAAQQ,KAAK,CAACG,KAAN,CAAa,UAAS1B,IAAI,CAACkB,GAAI,GAAEH,UAAW,EAA5C,CAA+C,OAAMQ,KAAK,CAACE,MAAN,CAAaV,UAAb,CAAyB;AACtF,QAAQQ,KAAK,CAACG,KAAN,CAAa,WAAU1B,IAAI,CAACkB,GAAI,GAAEH,UAAW,EAA7C,CAAgD,OAAMQ,KAAK,CAACE,MAAN,CAAaV,UAAb,CAAyB;AACvF,KAJe,CAITY,IAJS,EAAX;AAKD;;AAED,QAAMC,WAAW,GAAGlB,gBAAgB,GAAGmB,MAAnB,CAA2BC,KAAD,IAC5CA,KAAK,CAACC,QAAN,CAAehB,UAAf,CADkB,CAApB;;AAIA,MAAIa,WAAW,CAACR,MAAZ,GAAqB,CAArB,IAA0BQ,WAAW,CAACR,MAAZ,GAAqB,CAAnD,EAAsD;AACpDtB,IAAAA,KAAK,CAACwB,IAAN,CACE,sBACEM,WAAW,CAACtB,GAAZ,CAAiB0B,UAAD,IAAiB,KAAIA,UAAW,EAAhD,EAAmD5B,IAAnD,CAAwD,IAAxD,CAFJ;AAID;;AAED,SAAO,KAAP;AACD;;AAEM,SAAS6B,GAAT,CAAaC,GAAb,EAAkB;AACvB,SAAOjC,MAAM,CAACkC,UAAP,CAAkB,KAAlB,EAAyBC,MAAzB,CAAgCF,GAAhC,EAAqCG,MAArC,CAA4C,KAA5C,CAAP;AACD;;AAEM,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AAC3C,QAAM5B,SAAS,GAAGT,YAAY,CAACsC,IAAb,CAAmBC,WAAD,IAAiB;AACnD,WAAOF,KAAK,CAACG,OAAN,CAAcD,WAAd,MAA+B,CAAC,CAAvC;AACD,GAFiB,CAAlB;;AAIA,MAAI,CAAC9B,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,SAAOX,IAAI,CAACI,IAAL,CACLJ,IAAI,CAACY,QAAL,CAAcZ,IAAI,CAACa,OAAL,CAAaF,SAAb,CAAd,CADK,EAELX,IAAI,CAACY,QAAL,CAAcD,SAAd,CAFK,CAAP;AAID;;AAEM,SAASgC,iBAAT,CAA2B5B,UAA3B,EAAuC;AAC5C,QAAM6B,YAAY,GAAG5C,IAAI,CAACI,IAAL,CACnB,WADmB,EAEnBW,UAFmB,EAGnB,OAHmB,EAInB,aAJmB,CAArB;AAOA,MAAI8B,KAAK,GAAGC,SAAZ;;AAEA,MAAIhD,KAAK,CAACuB,IAAN,CAAW,IAAX,EAAiBuB,YAAjB,CAAJ,EAAoC;AAClC,UAAMG,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWnD,KAAK,CAACoD,GAAN,CAAUN,YAAV,EAAwBO,QAAxB,EAAX,CAAtB;;AACA,QAAIJ,aAAa,CAACF,KAAd,IAAuBE,aAAa,CAACF,KAAd,CAAoBxB,IAApB,CAAyBD,MAAzB,GAAkC,CAA7D,EAAgE;AAC9DyB,MAAAA,KAAK,GAAGE,aAAa,CAACF,KAAtB;AACD;AACF;;AAEDA,EAAAA,KAAK,GAAGA,KAAK,IAAIG,IAAI,CAACC,KAAL,CAAWnD,KAAK,CAACoD,GAAN,CAAU,aAAV,EAAyBC,QAAzB,EAAX,EAAgDN,KAAjE;AAEAO,EAAAA,MAAM,CAACC,IAAP,CAAYR,KAAZ,EAAmBS,OAAnB,CAA4BC,GAAD,IAAS;AAClCV,IAAAA,KAAK,CAACU,GAAD,CAAL,GAAaV,KAAK,CAACU,GAAD,CAAL,CAAWjD,GAAX,CAAgBkD,KAAD,IAC1BA,KAAK,CACFvC,OADH,CACW,eADX,EAC4BjB,IAAI,CAACY,QAAL,CAAcG,UAAd,CAD5B,EAEGE,OAFH,CAEW,QAFX,EAEqBjB,IAAI,CAACkB,GAF1B,CADW,CAAb;AAKD,GAND;AAQA,SAAO2B,KAAP;AACD;;AAEM,SAASY,OAAT,CAAiB1C,UAAjB,EAA6B;AAClC,QAAM2C,SAAS,GAAGf,iBAAiB,CAAC5B,UAAD,CAAjB,CAA8B4C,QAAhD;AAEA,SAAOD,SAAS,CAACE,KAAV,CAAiBC,QAAD,IACrB/D,KAAK,CAACuB,IAAN,CAAW,IAAX,EAAiBrB,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmC8C,QAAnC,CAAjB,CADK,CAAP;AAGD;;AAEM,SAASC,YAAT,CAAsBP,GAAtB,EAA2BQ,KAAK,GAAG,KAAnC,EAA0C;AAC/C,MAAIjE,KAAK,CAACW,GAAN,CAAU8C,GAAV,MAAmBT,SAAvB,EAAkC;AAChC,WAAOiB,KAAP;AACD;;AAED,SAAO,CAAC,CAAC,GAAD,EAAM,CAAN,EAAS,OAAT,EAAkB,KAAlB,EAAyB,IAAzB,EAA+B,MAA/B,EAAuChC,QAAvC,CAAgDjC,KAAK,CAACW,GAAN,CAAU8C,GAAV,CAAhD,CAAR;AACD;;AAEM,SAASS,aAAT,GAAyB;AAC9B,SAAOF,YAAY,CAAC,SAAD,CAAnB;AACD;;AAEM,SAASG,aAAT,GAAyB;AAC9B,SAAOH,YAAY,CAAC,SAAD,CAAnB;AACD;;AAEM,SAASI,aAAT,CAAuBC,OAAvB,EAAgCC,OAAhC,EAAyCC,UAAzC,EAAqD;AAC1D,MAAIL,aAAa,EAAjB,EAAqB;AACnB,UAAMjD,UAAU,GAAGjB,KAAK,CAACW,GAAN,CAAU,YAAV,CAAnB;;AAEA,QAAIM,UAAJ,EAAgB;AACduD,MAAAA,OAAO,CAACvD,UAAD,CAAP;AACD,KAFD,MAEO;AACLP,MAAAA,WAAW,CAAC8C,OAAZ,CAAoBgB,OAApB;AACD;AACF;;AAED,MAAIF,OAAJ,EAAa;AACXtE,IAAAA,KAAK,CAACwB,IAAN,CAAW8C,OAAX;AACD;;AACD,QAAMG,MAAM,GAAGzE,KAAK,CAAC0E,IAAN,CAAWL,OAAX,CAAf;;AAEA,MAAIF,aAAa,EAAjB,EAAqB;AACnBQ,IAAAA,OAAO;AACR;;AAED,MAAIF,MAAM,CAACG,IAAP,KAAgB,CAApB,EAAuB;AACrB,QAAIL,UAAJ,EAAgB;AACdvE,MAAAA,KAAK,CAACwB,IAAN,CAAW+C,UAAX;AACD;;AACDvE,IAAAA,KAAK,CAAC6E,IAAN,CAAW,CAAX;AACD;AACF;;AAEM,SAASF,OAAT,GAAmB;AACxB3E,EAAAA,KAAK,CAAC8E,EAAN,CAAS,KAAT,EAAgB,eAAhB;AACA9E,EAAAA,KAAK,CAAC8E,EAAN,CAAS,IAAT,EAAe,uBAAf;AACA9E,EAAAA,KAAK,CAAC8E,EAAN,CAAS,IAAT,EAAe,2BAAf;AACD,C,CAED;AACA;AACA;;;AACA,MAAMC,0BAA0B,GAAG,CACjC,SADiC,EAEjC,aAFiC,EAGjC,UAHiC,EAIjC,MAJiC,EAKjC,OALiC,CAAnC,C,CAQA;;AACA,MAAMC,wBAAwB,GAAG,CAC/B,MAD+B,EAE/B,aAF+B,EAG/B,QAH+B,EAI/B,cAJ+B,CAAjC;;AAOO,SAASC,yBAAT,CAAmCC,QAAQ,GAAG,KAA9C,EAAqD;AAC1D,QAAMC,WAAW,GAAGnF,KAAK,CAACoD,GAAN,CAAU,cAAV,EAA0BC,QAA1B,EAApB;AACA,QAAM+B,WAAW,GAAGlC,IAAI,CAACC,KAAL,CAAWgC,WAAX,CAApB,CAF0D,CAI1D;;AACAJ,EAAAA,0BAA0B,CAACvB,OAA3B,CACG6B,GAAD,IAAS,OAAOD,WAAW,CAAC,iBAAD,CAAX,CAA+BC,GAA/B,CADlB;AAIA,QAAMC,QAAQ,GAAG,IAAItF,KAAK,CAACuF,WAAV,CACfrC,IAAI,CAACsC,SAAL,CAAeJ,WAAf,EAA4BpC,SAA5B,EAAuC,CAAvC,IAA4C,IAD7B,CAAjB;AAIAsC,EAAAA,QAAQ,CAACG,EAAT,CAAY,uBAAZ,EAb0D,CAe1D;;AACAT,EAAAA,wBAAwB,CAACxB,OAAzB,CAAkCkC,KAAD,IAAW;AAC1C,WAAON,WAAW,CAACM,KAAD,CAAlB;AACD,GAFD;AAIA,SAAON,WAAW,CAAC,YAAD,CAAX,CAA0B,WAA1B,CAAP;;AAEA,MAAIF,QAAJ,EAAc;AACZ,UAAMS,gBAAgB,GAAG,IAAI3F,KAAK,CAACuF,WAAV,CAAsBK,cAAc,CAACR,WAAD,CAApC,CAAzB;AACAO,IAAAA,gBAAgB,CAACF,EAAjB,CAAoB,2BAApB;AACD;AACF;;AAEM,SAASI,iBAAT,CAA2BC,eAA3B,EAA4CV,WAA5C,EAAyD;AAC9D,QAAMW,iBAAiB,GAAG7C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACsC,SAAL,CAAeM,eAAf,CAAX,CAA1B;AAEAd,EAAAA,wBAAwB,CAACxB,OAAzB,CAAkCC,GAAD,IAAS;AACxCsC,IAAAA,iBAAiB,CAACtC,GAAD,CAAjB,GAAyB2B,WAAW,CAAC3B,GAAD,CAApC;AACD,GAFD;AAIA,QAAMuC,mBAAmB,GAAG1C,MAAM,CAACC,IAAP,CAAY6B,WAAW,CAACa,UAAZ,IAA0B,EAAtC,EAA0ClE,MAA1C,CACzB0B,GAAD,IAAS,CAACqC,eAAe,CAACG,UAAhB,CAA2BxC,GAA3B,CADgB,CAA5B;AAIAuC,EAAAA,mBAAmB,CAACxC,OAApB,CAA6BC,GAAD,IAAS;AACnCsC,IAAAA,iBAAiB,CAACE,UAAlB,CAA6BxC,GAA7B,IAAoC2B,WAAW,CAACa,UAAZ,CAAuBxC,GAAvB,CAApC;AACD,GAFD;AAIA,SAAOsC,iBAAP;AACD;;AAEM,SAASG,0BAAT,CAAoCC,eAApC,EAAqDjB,QAAQ,GAAG,KAAhE,EAAuE;AAC5E,QAAMC,WAAW,GAAGnF,KAAK,CAACoD,GAAN,CAAU+C,eAAV,EAA2B9C,QAA3B,EAApB;AACA,QAAM+B,WAAW,GAAGlC,IAAI,CAACC,KAAL,CAAWgC,WAAX,CAApB,CAF4E,CAI5E;;AACAH,EAAAA,wBAAwB,CAACxB,OAAzB,CAAkCkC,KAAD,IAAW;AAC1C,WAAON,WAAW,CAACM,KAAD,CAAlB;AACD,GAFD;AAIA,SAAON,WAAW,CAAC,YAAD,CAAX,CAA0B,WAA1B,CAAP;;AAEA,MAAIF,QAAJ,EAAc;AACZ,UAAMS,gBAAgB,GAAG,IAAI3F,KAAK,CAACuF,WAAV,CAAsBK,cAAc,CAACR,WAAD,CAApC,CAAzB;AACAO,IAAAA,gBAAgB,CAACF,EAAjB,CAAqB,GAAEU,eAAgB,MAAvC;AACD;;AAED,SAAOf,WAAP;AACD;;AAEM,SAASQ,cAAT,CAAwBR,WAAxB,EAAqC;AAC1C,SAAOjD,GAAG,CAACe,IAAI,CAACsC,SAAL,CAAeJ,WAAf,EAA4BpC,SAA5B,EAAuC,CAAvC,EAA0CnB,IAA1C,KAAmD,IAApD,CAAV;AACD;AAED;AACA;AACA;;;AACO,SAAS2C,OAAT,CAAiBvD,UAAjB,EAA6B;AAClC,MAAI,CAACA,UAAL,EAAiB;AACfjB,IAAAA,KAAK,CAACwB,IAAN,CAAW,mCAAX;AACAxB,IAAAA,KAAK,CAAC6E,IAAN,CAAW,CAAX;AACD;;AAED,MAAI,CAAC7D,gBAAgB,CAACC,UAAD,EAAa,IAAb,CAArB,EAAyC;AACvCjB,IAAAA,KAAK,CAAC6E,IAAN,CAAW,CAAX;AACD;;AAED,QAAM9B,KAAK,GAAGF,iBAAiB,CAAC5B,UAAD,CAA/B;AACA,QAAM,CAACmF,IAAD,IAASnF,UAAU,CAACI,KAAX,CAAiB,QAAjB,CAAf;AAEA,QAAMgF,YAAY,GAAGD,IAAI,KAAK,SAAT,GAAqBrD,KAAK,CAACuD,QAA3B,GAAsCvD,KAAK,CAACwD,OAAjE;AAEAxD,EAAAA,KAAK,CAACxB,IAAN,CAAWiC,OAAX,CAAoBgD,YAAD,IAAkB;AACnC,UAAMC,QAAQ,GAAGvG,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmCuF,YAAnC,CAAjB,CADmC,CAGnC;;AACA,QAAI,CAACxG,KAAK,CAACuB,IAAN,CAAW,IAAX,EAAiBkF,QAAjB,CAAL,EAAiC;AAC/B,UAAID,YAAY,KAAK,gBAArB,EAAuC;AACrCE,QAAAA,OAAO,CAACC,IAAR,CACG,iCAAgC1F,UAAW,KAAIuF,YAAa,2BAD/D;AAGD;;AAED;AACD;;AAED,UAAMI,mBAAmB,GAAG1G,IAAI,CAACI,IAAL,CAC1B,eAD0B,EAE1BW,UAF0B,EAG1BuF,YAH0B,CAA5B;AAMAxG,IAAAA,KAAK,CAAC6G,KAAN,CAAY,IAAZ,EAAkB3G,IAAI,CAACa,OAAL,CAAa6F,mBAAb,CAAlB;AACA5G,IAAAA,KAAK,CAAC8G,EAAN,CAASL,QAAT,EAAmBG,mBAAnB,EArBmC,CAuBnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA5G,IAAAA,KAAK,CACF+G,GADH,CACO,cADP,EACuB,OADvB,EACgCH,mBADhC,EAEGnB,EAFH,CAEMmB,mBAFN;AAGA5G,IAAAA,KAAK,CACF+G,GADH,CACO,WADP,EACoB,UADpB,EACgCH,mBADhC,EAEGnB,EAFH,CAEMmB,mBAFN;AAGD,GApCD;AAsCA5G,EAAAA,KAAK,CAAC6G,KAAN,CAAY,IAAZ,EAAkB3G,IAAI,CAACI,IAAL,CAAU,eAAV,EAA2BW,UAA3B,EAAuC,KAAvC,CAAlB;AAEAoF,EAAAA,YAAY,CAAC7C,OAAb,CAAqB,CAACwD,eAAD,EAAkBC,CAAlB,KAAwB;AAC3C,UAAMC,WAAW,GAAGhH,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmC+F,eAAnC,CAApB;AACA,UAAMG,sBAAsB,GAAGjH,IAAI,CAACI,IAAL,CAC7B,eAD6B,EAE7BW,UAF6B,EAG7B8B,KAAK,CAACc,QAAN,CAAeoD,CAAf,CAH6B,CAA/B;AAMAjH,IAAAA,KAAK,CAAC+G,GAAN,CAAU,WAAV,EAAuB,UAAvB,EAAmCG,WAAnC,EAAgDzB,EAAhD,CAAmD0B,sBAAnD;AACD,GATD,EAvDkC,CAkElC;AACA;AACA;;AACA,MAAIpE,KAAK,CAACc,QAAN,CAAevC,MAAf,GAAwB+E,YAAY,CAAC/E,MAAzC,EAAiD;AAC/CyB,IAAAA,KAAK,CAACc,QAAN,CAAeuD,KAAf,CAAqBf,YAAY,CAAC/E,MAAlC,EAA0CkC,OAA1C,CAAmD6D,gBAAD,IAAsB;AACtE,YAAMC,YAAY,GAAGpH,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmCoG,gBAAnC,CAArB;AACA,YAAME,uBAAuB,GAAGrH,IAAI,CAACI,IAAL,CAC9B,eAD8B,EAE9BW,UAF8B,EAG9BoG,gBAH8B,CAAhC;AAMArH,MAAAA,KAAK,CAAC8G,EAAN,CAASQ,YAAT,EAAuBC,uBAAvB;AACD,KATD;AAUD,GAhFiC,CAkFlC;;;AACA,MAAI,YAAYxE,KAAhB,EAAuB;AACrBA,IAAAA,KAAK,CAACyE,MAAN,CAAahE,OAAb,CAAsBiE,gBAAD,IAAsB;AACzC,YAAMC,YAAY,GAAGxH,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmCwG,gBAAnC,CAArB;AACA,YAAME,uBAAuB,GAAGzH,IAAI,CAACI,IAAL,CAC9B,eAD8B,EAE9BW,UAF8B,EAG9BwG,gBAH8B,CAAhC;AAMAzH,MAAAA,KAAK,CAAC8G,EAAN,CAASY,YAAT,EAAuBC,uBAAvB;AACD,KATD;AAUD,GA9FiC,CAgGlC;;;AACA,QAAMC,MAAM,GAAG1H,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmC,KAAnC,CAAf;;AACA,MAAIjB,KAAK,CAACuB,IAAN,CAAW,IAAX,EAAiBqG,MAAjB,CAAJ,EAA8B;AAC5B5H,IAAAA,KAAK,CAAC8G,EAAN,CACE5G,IAAI,CAACI,IAAL,CAAUsH,MAAV,EAAkB,MAAlB,CADF,EAEE1H,IAAI,CAACI,IAAL,CAAU,eAAV,EAA2BW,UAA3B,EAAuC,KAAvC,CAFF;AAID,GAvGiC,CAyGlC;;;AACAjB,EAAAA,KAAK,CAAC6G,KAAN,CAAY,IAAZ,EAAkB3G,IAAI,CAACI,IAAL,CAAU,eAAV,EAA2BW,UAA3B,EAAuC,MAAvC,CAAlB;AACA,QAAM4G,OAAO,GAAG3H,IAAI,CAACI,IAAL,CAAU,WAAV,EAAuBW,UAAvB,EAAmC,MAAnC,CAAhB;;AAEA,MAAIjB,KAAK,CAACuB,IAAN,CAAW,IAAX,EAAiBsG,OAAjB,CAAJ,EAA+B;AAC7B7H,IAAAA,KAAK,CAAC8G,EAAN,CACE5G,IAAI,CAACI,IAAL,CAAUuH,OAAV,EAAmB,GAAnB,CADF,EAEE3H,IAAI,CAACI,IAAL,CAAU,eAAV,EAA2BW,UAA3B,EAAuC,MAAvC,CAFF;AAID;AACF;;AAEM,SAAS6G,mBAAT,GAA+B;AACpC,WAASC,WAAT,CAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AACtCtD,IAAAA,OAAO;;AAEP,QAAIqD,OAAO,CAACE,KAAZ,EAAmB;AACjBxB,MAAAA,OAAO,CAACwB,KAAR,CAAcF,OAAO,CAACE,KAAtB;AACD;;AAED,QAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnB;AACD;;AACD,QAAIF,QAAQ,IAAIA,QAAQ,KAAK,CAA7B,EAAgC;AAC9B;AACD;;AACD,QAAID,OAAO,CAACnD,IAAZ,EAAkB;AAChB;AACAuD,MAAAA,OAAO,CAACvD,IAAR;AACD;AACF,GAlBmC,CAoBpC;;;AACAuD,EAAAA,OAAO,CAACC,EAAR,CAAW,MAAX,EAAmBN,WAAW,CAACO,IAAZ,CAAiB,IAAjB,EAAuB;AAAEH,IAAAA,OAAO,EAAE;AAAX,GAAvB,CAAnB,EArBoC,CAuBpC;;AACAC,EAAAA,OAAO,CAACC,EAAR,CAAW,QAAX,EAAqBN,WAAW,CAACO,IAAZ,CAAiB,IAAjB,EAAuB;AAAEzD,IAAAA,IAAI,EAAE;AAAR,GAAvB,CAArB,EAxBoC,CA0BpC;;AACAuD,EAAAA,OAAO,CAACC,EAAR,CAAW,SAAX,EAAsBN,WAAW,CAACO,IAAZ,CAAiB,IAAjB,EAAuB;AAAEzD,IAAAA,IAAI,EAAE;AAAR,GAAvB,CAAtB;AACAuD,EAAAA,OAAO,CAACC,EAAR,CAAW,SAAX,EAAsBN,WAAW,CAACO,IAAZ,CAAiB,IAAjB,EAAuB;AAAEzD,IAAAA,IAAI,EAAE;AAAR,GAAvB,CAAtB,EA5BoC,CA8BpC;;AACAuD,EAAAA,OAAO,CAACC,EAAR,CAAW,mBAAX,EAAiCH,KAAD,IAC9BH,WAAW,CAAC;AAAElD,IAAAA,IAAI,EAAE,IAAR;AAAcqD,IAAAA;AAAd,GAAD,CADb;AAGD",
      "sourceRoot": "/home/runner/work/javascript/javascript/scripts/",
      "sourcesContent": [
        "/**\n * This file provides helper functions & is NOT intended to be run as a script.\n */\n\nconst shell = require('shelljs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nconst exerciseDirs = shell.ls(\n  '-d',\n  path.join('exercises', '{practice,concept}', '*')\n);\n\nexport const packageFiles = exerciseDirs.map((dir) => `${dir}/package.json`);\n\nexport const assignments = shell.env['ASSIGNMENT']\n  ? [shell.env['ASSIGNMENT']]\n  : knownAssignments();\n\nfunction knownAssignments() {\n  return exerciseDirs.map((directory) =>\n    path.join(path.basename(path.dirname(directory)), path.basename(directory))\n  );\n}\n\nexport function assertAssignment(assignment, shouldExist = true) {\n  assignment = assignment.replace(/[/\\\\]/g, path.sep);\n\n  if (assignment.split(path.sep).length === 2) {\n    if (!shouldExist) {\n      return true;\n    }\n\n    if (shell.test(`-d`, path.join('exercises', assignment))) {\n      return true;\n    }\n  }\n\n  shell.echo(\"[Failure] that's not a valid assignment reference\");\n  const chalk = require('chalk');\n\n  if (assignment.split(path.sep).length === 1) {\n    // prettier-ignore\n    shell.echo(`\nExpected ${chalk.cyan(`{type}${path.sep}{slug}`)}, actual: ${chalk.yellow(assignment)}.\n- Use ${chalk.green(`concept${path.sep}${assignment}`)} if ${chalk.yellow(assignment)} is a concept exercise.\n- Use ${chalk.green(`practice${path.sep}${assignment}`)} if ${chalk.yellow(assignment)} is a practice exercise.\n    `.trim());\n  }\n\n  const suggestions = knownAssignments().filter((known) =>\n    known.includes(assignment)\n  );\n\n  if (suggestions.length > 0 && suggestions.length < 5) {\n    shell.echo(\n      '\\nDid you mean:\\n' +\n        suggestions.map((suggestion) => `- ${suggestion}`).join('\\n')\n    );\n  }\n\n  return false;\n}\n\nexport function sha(str) {\n  return crypto.createHash('md5').update(str).digest('hex');\n}\n\nexport function findExerciseDirectory(input) {\n  const directory = exerciseDirs.find((exerciseDir) => {\n    return input.indexOf(exerciseDir) !== -1;\n  });\n\n  if (!directory) {\n    return null;\n  }\n\n  return path.join(\n    path.basename(path.dirname(directory)),\n    path.basename(directory)\n  );\n}\n\nexport function fileConfiguration(assignment) {\n  const pathToConfig = path.join(\n    'exercises',\n    assignment,\n    '.meta',\n    'config.json'\n  );\n\n  let files = undefined;\n\n  if (shell.test('-f', pathToConfig)) {\n    const configuration = JSON.parse(shell.cat(pathToConfig).toString());\n    if (configuration.files && configuration.files.test.length > 0) {\n      files = configuration.files;\n    }\n  }\n\n  files = files || JSON.parse(shell.cat('config.json').toString()).files;\n\n  Object.keys(files).forEach((key) => {\n    files[key] = files[key].map((value) =>\n      value\n        .replace('%{kebab_slug}', path.basename(assignment))\n        .replace(/[/\\\\]/g, path.sep)\n    );\n  });\n\n  return files;\n}\n\nexport function hasStub(assignment) {\n  const stubFiles = fileConfiguration(assignment).solution;\n\n  return stubFiles.every((stubFile) =>\n    shell.test('-f', path.join('exercises', assignment, stubFile))\n  );\n}\n\nexport function envIsThruthy(key, unset = false) {\n  if (shell.env[key] === undefined) {\n    return unset;\n  }\n\n  return !['0', 0, 'false', false, null, 'null'].includes(shell.env[key]);\n}\n\nexport function shouldPrepare() {\n  return envIsThruthy('PREPARE');\n}\n\nexport function shouldCleanup() {\n  return envIsThruthy('CLEANUP');\n}\n\nexport function prepareAndRun(command, infoStr, failureStr) {\n  if (shouldPrepare()) {\n    const assignment = shell.env['ASSIGNMENT'];\n\n    if (assignment) {\n      prepare(assignment);\n    } else {\n      assignments.forEach(prepare);\n    }\n  }\n\n  if (infoStr) {\n    shell.echo(infoStr);\n  }\n  const result = shell.exec(command);\n\n  if (shouldCleanup()) {\n    cleanUp();\n  }\n\n  if (result.code !== 0) {\n    if (failureStr) {\n      shell.echo(failureStr);\n    }\n    shell.exit(1);\n  }\n}\n\nexport function cleanUp() {\n  shell.rm('-rf', 'tmp_exercises');\n  shell.rm('-f', 'exercise-package.json');\n  shell.rm('-f', 'exercise-package.json.sha');\n}\n\n// These packages will be skipped while performing checksum. In other words,\n// these packages are only interesting for maintaining this repository and not\n// for the student.\nconst SKIP_PACKAGES_FOR_CHECKSUM = [\n  'shelljs',\n  '@babel/node',\n  'prettier',\n  'diff',\n  'chalk',\n];\n\n// These fields may differ between package.json files.\nconst SKIP_FIELDS_FOR_CHECKSUM = [\n  'name',\n  'description',\n  'author',\n  'contributors',\n];\n\nexport function createExercisePackageJson(writeSha = false) {\n  const packageFile = shell.cat('package.json').toString();\n  const packageJson = JSON.parse(packageFile);\n\n  // Filter out some unwanted packages and create package.json for exercises\n  SKIP_PACKAGES_FOR_CHECKSUM.forEach(\n    (pkg) => delete packageJson['devDependencies'][pkg]\n  );\n\n  const shellStr = new shell.ShellString(\n    JSON.stringify(packageJson, undefined, 2) + '\\n'\n  );\n\n  shellStr.to('exercise-package.json');\n\n  // Now remove all fields that should not be considered for checksum\n  SKIP_FIELDS_FOR_CHECKSUM.forEach((field) => {\n    delete packageJson[field];\n  });\n\n  delete packageJson['repository']['directory'];\n\n  if (writeSha) {\n    const checksumShellStr = new shell.ShellString(shaPackageJson(packageJson));\n    checksumShellStr.to('exercise-package.json.sha');\n  }\n}\n\nexport function mergePackageJsons(basePackageJson, packageJson) {\n  const mergedPackageJson = JSON.parse(JSON.stringify(basePackageJson));\n\n  SKIP_FIELDS_FOR_CHECKSUM.forEach((key) => {\n    mergedPackageJson[key] = packageJson[key];\n  });\n\n  const extraRepositoryKeys = Object.keys(packageJson.repository || {}).filter(\n    (key) => !basePackageJson.repository[key]\n  );\n\n  extraRepositoryKeys.forEach((key) => {\n    mergedPackageJson.repository[key] = packageJson.repository[key];\n  });\n\n  return mergedPackageJson;\n}\n\nexport function prepareExercisePackageJson(destinationPath, writeSha = false) {\n  const packageFile = shell.cat(destinationPath).toString();\n  const packageJson = JSON.parse(packageFile);\n\n  // Now remove all fields that should not be considered for checksum\n  SKIP_FIELDS_FOR_CHECKSUM.forEach((field) => {\n    delete packageJson[field];\n  });\n\n  delete packageJson['repository']['directory'];\n\n  if (writeSha) {\n    const checksumShellStr = new shell.ShellString(shaPackageJson(packageJson));\n    checksumShellStr.to(`${destinationPath}.sha`);\n  }\n\n  return packageJson;\n}\n\nexport function shaPackageJson(packageJson) {\n  return sha(JSON.stringify(packageJson, undefined, 2).trim() + '\\n');\n}\n\n/**\n * Copy sample solution and specs for given assignment to tmp_exercises\n */\nexport function prepare(assignment) {\n  if (!assignment) {\n    shell.echo('[Failure] Assignment not provided');\n    shell.exit(1);\n  }\n\n  if (!assertAssignment(assignment, true)) {\n    shell.exit(1);\n  }\n\n  const files = fileConfiguration(assignment);\n  const [type] = assignment.split(/[/\\\\]/g);\n\n  const exampleFiles = type === 'concept' ? files.exemplar : files.example;\n\n  files.test.forEach((specFileName) => {\n    const specFile = path.join('exercises', assignment, specFileName);\n\n    // Skip file if it doesn't exist\n    if (!shell.test('-f', specFile)) {\n      if (specFileName !== 'custom.spec.js') {\n        console.warn(\n          `Skipped copying test file for ${assignment}: ${specFileName} because it doesn't exist`\n        );\n      }\n\n      return;\n    }\n\n    const specFileDestination = path.join(\n      'tmp_exercises',\n      assignment,\n      specFileName\n    );\n\n    shell.mkdir('-p', path.dirname(specFileDestination));\n    shell.cp(specFile, specFileDestination);\n\n    // Enable tests\n    //\n    // This purposefully does not replace describe.skip or test.skip, so we can\n    // have test cases that are _always_ skipped, including CI. Use case?\n    // - platform dependent tests\n    // - test cases that don't yet work with our solution\n    //\n    shell\n      .sed(/x(test|it)\\(/, 'test(', specFileDestination)\n      .to(specFileDestination);\n    shell\n      .sed('xdescribe', 'describe', specFileDestination)\n      .to(specFileDestination);\n  });\n\n  shell.mkdir('-p', path.join('tmp_exercises', assignment, 'lib'));\n\n  exampleFiles.forEach((exampleFileName, i) => {\n    const exampleFile = path.join('exercises', assignment, exampleFileName);\n    const exampleFileDestination = path.join(\n      'tmp_exercises',\n      assignment,\n      files.solution[i]\n    );\n\n    shell.sed(\"from '../\", \"from './\", exampleFile).to(exampleFileDestination);\n  });\n\n  // If there are more solution files than example or exemplar files, copy over\n  // the remaining ones. This allows us to overwrite solution files by providing\n  // them in exemplar, but keep them\n  if (files.solution.length > exampleFiles.length) {\n    files.solution.slice(exampleFiles.length).forEach((extraLibFileName) => {\n      const solutionFile = path.join('exercises', assignment, extraLibFileName);\n      const solutionFileDestination = path.join(\n        'tmp_exercises',\n        assignment,\n        extraLibFileName\n      );\n\n      shell.cp(solutionFile, solutionFileDestination);\n    });\n  }\n\n  // Copy new-style editor files\n  if ('editor' in files) {\n    files.editor.forEach((readonlyFileName) => {\n      const readonlyFile = path.join('exercises', assignment, readonlyFileName);\n      const readonlyFileDestination = path.join(\n        'tmp_exercises',\n        assignment,\n        readonlyFileName\n      );\n\n      shell.cp(readonlyFile, readonlyFileDestination);\n    });\n  }\n\n  // Copy legacy lib files\n  const libDir = path.join('exercises', assignment, 'lib');\n  if (shell.test('-d', libDir)) {\n    shell.cp(\n      path.join(libDir, '*.js'),\n      path.join('tmp_exercises', assignment, 'lib')\n    );\n  }\n\n  // Copy legacy data files\n  shell.mkdir('-p', path.join('tmp_exercises', assignment, 'data'));\n  const dataDir = path.join('exercises', assignment, 'data');\n\n  if (shell.test('-d', dataDir)) {\n    shell.cp(\n      path.join(dataDir, '*'),\n      path.join('tmp_exercises', assignment, 'data')\n    );\n  }\n}\n\nexport function registerExitHandler() {\n  function exitHandler(options, exitCode) {\n    cleanUp();\n\n    if (options.error) {\n      console.error(options.error);\n    }\n\n    if (options.cleanup) {\n      /* clean exit */\n    }\n    if (exitCode || exitCode === 0) {\n      /* exit code given */\n    }\n    if (options.exit) {\n      /* should exit forcefully */\n      process.exit();\n    }\n  }\n\n  //do something when app is closing\n  process.on('exit', exitHandler.bind(null, { cleanup: true }));\n\n  //catches ctrl+c event\n  process.on('SIGINT', exitHandler.bind(null, { exit: true }));\n\n  // catches \"kill pid\" (for example: nodemon restart)\n  process.on('SIGUSR1', exitHandler.bind(null, { exit: true }));\n  process.on('SIGUSR2', exitHandler.bind(null, { exit: true }));\n\n  //catches uncaught exceptions\n  process.on('uncaughtException', (error) =>\n    exitHandler({ exit: true, error })\n  );\n}\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1620250116102
  }
}