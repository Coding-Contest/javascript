#!/usr/bin/env node

/**
 * Run this script (from root directory): npx babel-node scripts/name-check
 *
 * This will run following checks:
 *
 * 1. Package name if of the format "@exercism/javascript-<exercise>"
 * 2. Package name is not duplicated
 */

const shell = require('shelljs');

let { packageFiles, registerExitHandler } = require('./helpers');

registerExitHandler();

let exitCode = 0;

// First 2 arguments are node and script name skip them
// Check if rest has --fix
const fix = process.argv.slice(2).includes('--fix');

const envAssignment = shell.env['ASSIGNMENT'];
if(envAssignment) {
  packageFiles = [`exercises/${envAssignment}/package.json`];
}

// Check if package name in each exercises' package.json is of the format "@exercism/javascript-<exercise>"
packageFiles.forEach(filePath => {
  const file = JSON.parse(shell.cat(filePath).toString());

  const givenName = file['name'];
  const exerciseName = filePath.split('/')[2];
  const expectedName = `@exercism/javascript-${exerciseName}`;

  if(givenName == expectedName) return;

  if(fix) {
    file['name'] = expectedName;
    const fileWithFixedName = new shell.ShellString(JSON.stringify(file, undefined, 2) + '\n');
    fileWithFixedName.to(filePath);
    shell.echo(`[Success]: Fixed package name in ${filePath}`);
  }
  else {
    exitCode = 1;
    shell.echo(`[Failure]: Package name in ${filePath} must be ${expectedName}"`);
  }
});

if(exitCode == 0) {
  shell.echo('[Success] All package names are in proper format.');
}

shell.exit(exitCode);
